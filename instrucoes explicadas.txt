APRESENTAR 


*******************************************************************************************************************
001111 00000 10000 0000000000001010 //LI $16 10	

001111 00000 10001 0000000000010100 //LI $17 20	

000000 01000 10001 10000 00000 100000 //ADD $8 = $17 + $16

111111 10000 10001 01000 00000000000 //PRINT $16 $17 $8

00011100000000000000000000000000 //PAUSE

00111100000100000000000000001010
00111100000100010000000000010100
00000001000100011000000000100000
11111110000100010100000000000000
00011100000000000000000000000000

*******************************************************************************************************************

001111 00000 10000 0000000000000010 //LI $16 2	

11100000010000000000000000000000 //Input $2	

001000 00010 00100 0000000000000010 //ADDI $4 = $2 + 2 

111111 00010 10000 00100 00000000000 //PRINT $2 $16 $4

00011100000000000000000000000000 //PAUSE

00111100000100000000000000000010
11100000010000000000000000000000
00100000010001000000000000000010
11111100010100000010000000000000
00011100000000000000000000000000

*******************************************************************************************************************
00000000000000000000000000000000

111000 00100 00000000000000000000	//IN $4		Le input para $4

001111 00000 00010 000000000000010	//LI $2 2	LUI 2 para $2

001111 00000 00011 000000000000001	//LI $3 1	LUI 1 para $3

000000 00100 00010 01000 00000101010 	//SLT $8 = (($4 < $2)) ? 1 : 0 

111111 00100 00010 01000 00000000000 //PRINT $4 $2 $8

000100 00011 01000 0000000000001000	BEQ pc = ($3 == $8) ? 8 : 7 (pula para pc 6 se input for menor que 2)

00011100000000000000000000000000 PAUSE

00001000000000000000000000000000 //JUMP 0

00000000000000000000000000000000
11100000100000000000000000000000
00111100000000100000000000000010
00111100000000110000000000000001
00000000100000100100000000101010
11111100100000100100000000000000
00010000011010000000000000001000
00011100000000000000000000000000
00001000000000000000000000000000

*******************************************************************************************************************
001111 00000 00010 000000000000000	//LUI $2 '

001000 00010 00010 0000000000000001 //ADDI $2  = $2 + 1 

111111 0000000000 00010 00000000000 //PRINT $2

00001000000000000000000000000001 //JUMP 1

0011110000000010000000000000000
00100000010000100000000000000001 
11111100000000000001000000000000
00001000000000000000000000000001

*******************************************************************************************************************

load upper 10; load upper 20; add

00111100000100000000000000001010
00111100000100010000000000010100
00000010000100010100000000100000

load upper 10; load upper 20; sub
00111100000000100000000000001010
00111100000001010000000000010100
00000000101000100100000000100010


load upper 10; load upper 20; mult
00111100000000100000000000001010
00111100000001010000000000010100
00000000101000100100000000011000

set less than 
00111100000100000000000000010100
00111100000100010000000000001010
00000010000100010100000000101010

load i, store w e load w
00111100000100010000000000001010
00111100000100000000000000010100
10101100001100000000000000000010
10001100001100100000000000000010
00000010001100100001100000100000
with jump 
00001000000000000000000000000000

jal 1
000011 00000 000000000000000000001
lui rt(10001) = 10 
001111 00000 10001 0000000000001010
lui rt(10000) = 20 
001111 00000 10000 0000000000010100
sw rt(3) = 20 
101011 00001 10000 0000000000000010
lw 10010 = rt(3)  
100011 00001 10010 0000000000000010
soma rd(00100) = rs(10001) + rt(10010) -> 10 + 20
000000 10001 10010 00100 00000 100000


branch on equal 
00111100000100010000000000001010
00111100000100000000000000001010
00010010001100000000000000000001
10101100001100000000000000000010
10001100001100100000000000000010
00000010001100100001100000100000

ADD I 
00111100000100010000000000001010
00100010001100000000000000000010


00111100000100010000000000001010
00111100000100000000000000010100
10101100001100000000000000000010
10001100001100100000000000000010
00000010001100100001100000100000
11111110001100100001100000000000
00001100000000000000000000000001

